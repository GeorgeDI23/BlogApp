/*!
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { InjectionToken, Injectable, Inject, Injector, Component, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { assertIssuer, assertClientId, assertRedirectUri } from '@okta/configuration-validation';
import OktaAuth from '@okta/okta-auth-js';
import { Observable } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const OKTA_CONFIG = new InjectionToken('okta.config.angular');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var packageInfo = {
    'name': '@okta/okta-angular',
    'version': '2.2.0'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class OktaAuthService {
    /**
     * @param {?} config
     * @param {?} injector
     */
    constructor(config, injector) {
        this.injector = injector;
        this.observers = [];
        /**
         * Cache the auth config.
         */
        this.config = Object.assign({}, config);
        this.config.scopes = this.config.scopes || ['openid', 'email'];
        /**
         * Scrub scopes to ensure 'openid' is included
         */
        this.scrubScopes(this.config.scopes);
        // Assert Configuration
        assertIssuer(this.config.issuer, this.config.testing);
        assertClientId(this.config.clientId);
        assertRedirectUri(this.config.redirectUri);
        this.oktaAuth = new OktaAuth(this.config);
        this.oktaAuth.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.oktaAuth.userAgent}`;
        this.$authenticationState = new Observable((observer) => { this.observers.push(observer); });
    }
    /**
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    login(fromUri, additionalParams) {
        this.setFromUri(fromUri);
        /** @type {?} */
        const onAuthRequired = this.config.onAuthRequired;
        if (onAuthRequired) {
            return onAuthRequired(this, this.injector);
        }
        return this.loginRedirect(undefined, additionalParams);
    }
    /**
     * @return {?}
     */
    getTokenManager() {
        return this.oktaAuth.tokenManager;
    }
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     * @return {?}
     */
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            // Support a user-provided method to check authentication
            if (this.config.isAuthenticated) {
                return (this.config.isAuthenticated)(this);
            }
            /** @type {?} */
            const accessToken = yield this.getAccessToken();
            /** @type {?} */
            const idToken = yield this.getIdToken();
            return !!(accessToken || idToken);
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    emitAuthenticationState(state) {
        return __awaiter(this, void 0, void 0, function* () {
            this.observers.forEach(observer => observer.next(state));
        });
    }
    /**
     * Returns the current accessToken in the tokenManager.
     * @return {?}
     */
    getAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const accessToken = (/** @type {?} */ (yield this.oktaAuth.tokenManager.get('accessToken')));
                return accessToken.accessToken;
            }
            catch (err) {
                // The user no longer has an existing SSO session in the browser.
                // (OIDC error `login_required`)
                // Ask the user to authenticate again.
                return undefined;
            }
        });
    }
    /**
     * Returns the current idToken in the tokenManager.
     * @return {?}
     */
    getIdToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const idToken = (/** @type {?} */ (yield this.oktaAuth.tokenManager.get('idToken')));
                return idToken.idToken;
            }
            catch (err) {
                // The user no longer has an existing SSO session in the browser.
                // (OIDC error `login_required`)
                // Ask the user to authenticate again.
                return undefined;
            }
        });
    }
    /**
     * Returns user claims from the /userinfo endpoint.
     * @return {?}
     */
    getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.oktaAuth.token.getUserInfo();
        });
    }
    /**
     * Returns the configuration object used.
     * @return {?}
     */
    getOktaConfig() {
        return this.config;
    }
    /**
     * Launches the login redirect.
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    loginRedirect(fromUri, additionalParams) {
        if (fromUri) {
            this.setFromUri(fromUri);
        }
        /** @type {?} */
        const params = Object.assign({
            scopes: this.config.scopes,
            responseType: this.config.responseType
        }, additionalParams);
        return this.oktaAuth.token.getWithRedirect(params); // can throw
    }
    /**
     * Stores the intended path to redirect after successful login.
     * @param {?=} fromUri
     * @return {?}
     */
    setFromUri(fromUri) {
        // Use current location if fromUri was not passed
        fromUri = fromUri || window.location.href;
        // If a relative path was passed, convert to absolute URI
        if (fromUri.charAt(0) === '/') {
            fromUri = window.location.origin + fromUri;
        }
        sessionStorage.setItem('referrerPath', fromUri);
    }
    /**
     * Returns the referrer path from localStorage or app root.
     * @return {?}
     */
    getFromUri() {
        /** @type {?} */
        const fromUri = sessionStorage.getItem('referrerPath') || window.location.origin;
        sessionStorage.removeItem('referrerPath');
        return fromUri;
    }
    /**
     * Parses the tokens from the callback URL.
     * @return {?}
     */
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const res = yield this.oktaAuth.token.parseFromUrl();
            /** @type {?} */
            const tokens = res.tokens;
            if (tokens.accessToken) {
                this.oktaAuth.tokenManager.add('accessToken', (/** @type {?} */ (tokens.accessToken)));
            }
            if (tokens.idToken) {
                this.oktaAuth.tokenManager.add('idToken', (/** @type {?} */ (tokens.idToken)));
            }
            if (yield this.isAuthenticated()) {
                this.emitAuthenticationState(true);
            }
        });
    }
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param {?=} options
     * @return {?}
     */
    logout(options) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let redirectUri = null;
            options = options || {};
            if (typeof options === 'string') {
                redirectUri = options;
                // If a relative path was passed, convert to absolute URI
                if (redirectUri.charAt(0) === '/') {
                    redirectUri = window.location.origin + redirectUri;
                }
                options = {
                    postLogoutRedirectUri: redirectUri
                };
            }
            yield this.oktaAuth.signOut(options);
            this.emitAuthenticationState(false);
        });
    }
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param {?} scopes
     * @return {?}
     */
    scrubScopes(scopes) {
        if (scopes.indexOf('openid') >= 0) {
            return;
        }
        scopes.unshift('openid');
    }
}
OktaAuthService.ɵfac = function OktaAuthService_Factory(t) { return new (t || OktaAuthService)(ɵngcc0.ɵɵinject(OKTA_CONFIG), ɵngcc0.ɵɵinject(Injector)); };
OktaAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OktaAuthService, factory: OktaAuthService.ɵfac });
/** @nocollapse */
OktaAuthService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [OKTA_CONFIG,] }] },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OktaAuthService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [OKTA_CONFIG]
            }] }, { type: Injector }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class OktaCallbackComponent {
    /**
     * @param {?} okta
     */
    constructor(okta) {
        this.okta = okta;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * Handles the response from Okta and parses tokens.
             */
            return this.okta.handleAuthentication()
                .then(() => {
                /**
                 * Navigate back to the saved uri, or root of application.
                 * @type {?}
                 */
                const fromUri = this.okta.getFromUri();
                window.location.replace(fromUri);
            })
                .catch(e => {
                this.error = e.toString();
            });
        });
    }
}
OktaCallbackComponent.ɵfac = function OktaCallbackComponent_Factory(t) { return new (t || OktaCallbackComponent)(ɵngcc0.ɵɵdirectiveInject(OktaAuthService)); };
OktaCallbackComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OktaCallbackComponent, selectors: [["ng-component"]], decls: 2, vars: 1, template: function OktaCallbackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.error);
    } }, encapsulation: 2 });
/** @nocollapse */
OktaCallbackComponent.ctorParameters = () => [
    { type: OktaAuthService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OktaCallbackComponent, [{
        type: Component,
        args: [{
                template: `<div>{{error}}</div>`
            }]
    }], function () { return [{ type: OktaAuthService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class OktaLoginRedirectComponent {
    /**
     * @param {?} okta
     */
    constructor(okta) {
        this.okta = okta;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.okta.loginRedirect();
        });
    }
}
OktaLoginRedirectComponent.ɵfac = function OktaLoginRedirectComponent_Factory(t) { return new (t || OktaLoginRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(OktaAuthService)); };
OktaLoginRedirectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OktaLoginRedirectComponent, selectors: [["ng-component"]], decls: 0, vars: 0, template: function OktaLoginRedirectComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
OktaLoginRedirectComponent.ctorParameters = () => [
    { type: OktaAuthService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OktaLoginRedirectComponent, [{
        type: Component,
        args: [{ template: `` }]
    }], function () { return [{ type: OktaAuthService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class OktaAuthGuard {
    /**
     * @param {?} oktaAuth
     * @param {?} injector
     */
    constructor(oktaAuth, injector) {
        this.oktaAuth = oktaAuth;
        this.injector = injector;
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.oktaAuth.isAuthenticated()) {
                return true;
            }
            /**
             * Get the operation to perform on failed authentication from
             * either the global config or route data injection.
             * @type {?}
             */
            const onAuthRequired = route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
            /**
             * Store the current path
             */
            this.oktaAuth.setFromUri(state.url);
            if (onAuthRequired) {
                onAuthRequired(this.oktaAuth, this.injector);
            }
            else {
                this.oktaAuth.loginRedirect();
            }
            return false;
        });
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canActivate(route, state);
        });
    }
}
OktaAuthGuard.ɵfac = function OktaAuthGuard_Factory(t) { return new (t || OktaAuthGuard)(ɵngcc0.ɵɵinject(OktaAuthService), ɵngcc0.ɵɵinject(Injector)); };
OktaAuthGuard.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OktaAuthGuard, factory: OktaAuthGuard.ɵfac });
/** @nocollapse */
OktaAuthGuard.ctorParameters = () => [
    { type: OktaAuthService },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OktaAuthGuard, [{
        type: Injectable
    }], function () { return [{ type: OktaAuthService }, { type: Injector }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} config
 * @param {?} injector
 * @return {?}
 */
function createOktaService(config, injector) {
    return new OktaAuthService(config, injector);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
const ɵ0 = createOktaService;
class OktaAuthModule {
}
OktaAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OktaAuthModule });
OktaAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OktaAuthModule_Factory(t) { return new (t || OktaAuthModule)(); }, providers: [
        OktaAuthGuard,
        {
            provide: OktaAuthService,
            useFactory: ɵ0,
            deps: [
                OKTA_CONFIG,
                Injector
            ]
        }
    ] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OktaAuthModule, { declarations: [OktaCallbackComponent, OktaLoginRedirectComponent], exports: [OktaCallbackComponent, OktaLoginRedirectComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OktaAuthModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    OktaCallbackComponent,
                    OktaLoginRedirectComponent,
                ],
                exports: [
                    OktaCallbackComponent,
                    OktaLoginRedirectComponent,
                ],
                providers: [
                    OktaAuthGuard,
                    {
                        provide: OktaAuthService,
                        useFactory: ɵ0,
                        deps: [
                            OKTA_CONFIG,
                            Injector
                        ]
                    }
                ]
            }]
    }], null, null); })();

export { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthService, OktaCallbackComponent, OktaLoginRedirectComponent, createOktaService as ɵa };

//# sourceMappingURL=okta-angular.js.map