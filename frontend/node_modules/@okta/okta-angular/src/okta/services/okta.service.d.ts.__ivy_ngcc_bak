import { Injector } from '@angular/core';
import { OktaConfig } from '../models/okta.config';
import { UserClaims } from '../models/user-claims';
import { TokenManager } from '../models/token-manager';
import { Observable } from 'rxjs';
export declare class OktaAuthService {
    private injector;
    private oktaAuth;
    private config;
    private observers;
    $authenticationState: Observable<boolean>;
    constructor(config: OktaConfig, injector: Injector);
    login(fromUri?: string, additionalParams?: object): any;
    getTokenManager(): TokenManager;
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     */
    isAuthenticated(): Promise<boolean>;
    private emitAuthenticationState;
    /**
     * Returns the current accessToken in the tokenManager.
     */
    getAccessToken(): Promise<string | undefined>;
    /**
     * Returns the current idToken in the tokenManager.
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * Returns user claims from the /userinfo endpoint.
     */
    getUser(): Promise<UserClaims>;
    /**
     * Returns the configuration object used.
     */
    getOktaConfig(): OktaConfig;
    /**
     * Launches the login redirect.
     * @param fromUri
     * @param additionalParams
     */
    loginRedirect(fromUri?: string, additionalParams?: object): any;
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     * @param queryParams
     */
    setFromUri(fromUri?: string): void;
    /**
     * Returns the referrer path from localStorage or app root.
     */
    getFromUri(): string;
    /**
     * Parses the tokens from the callback URL.
     */
    handleAuthentication(): Promise<void>;
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param options
     */
    logout(options?: any): Promise<void>;
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param scopes
     */
    scrubScopes(scopes: string[]): void;
}
