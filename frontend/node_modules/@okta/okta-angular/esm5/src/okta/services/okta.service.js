/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { Inject, Injectable, Injector } from '@angular/core';
import { assertIssuer, assertClientId, assertRedirectUri, } from '@okta/configuration-validation';
import { OKTA_CONFIG } from '../models/okta.config';
import packageInfo from '../packageInfo';
/**
 * Import the okta-auth-js library
 */
import OktaAuth from '@okta/okta-auth-js';
import { Observable } from 'rxjs';
var OktaAuthService = /** @class */ (function () {
    function OktaAuthService(config, injector) {
        var _this = this;
        this.injector = injector;
        this.observers = [];
        /**
         * Cache the auth config.
         */
        this.config = Object.assign({}, config);
        this.config.scopes = this.config.scopes || ['openid', 'email'];
        /**
         * Scrub scopes to ensure 'openid' is included
         */
        this.scrubScopes(this.config.scopes);
        // Assert Configuration
        assertIssuer(this.config.issuer, this.config.testing);
        assertClientId(this.config.clientId);
        assertRedirectUri(this.config.redirectUri);
        this.oktaAuth = new OktaAuth(this.config);
        this.oktaAuth.userAgent = packageInfo.name + "/" + packageInfo.version + " " + this.oktaAuth.userAgent;
        this.$authenticationState = new Observable(function (observer) { _this.observers.push(observer); });
    }
    /**
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    OktaAuthService.prototype.login = /**
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    function (fromUri, additionalParams) {
        this.setFromUri(fromUri);
        /** @type {?} */
        var onAuthRequired = this.config.onAuthRequired;
        if (onAuthRequired) {
            return onAuthRequired(this, this.injector);
        }
        return this.loginRedirect(undefined, additionalParams);
    };
    /**
     * @return {?}
     */
    OktaAuthService.prototype.getTokenManager = /**
     * @return {?}
     */
    function () {
        return this.oktaAuth.tokenManager;
    };
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     */
    /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     * @return {?}
     */
    OktaAuthService.prototype.isAuthenticated = /**
     * Checks if there is an access token OR an id token
     * A custom method may be provided on config to override this logic
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var accessToken, idToken;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Support a user-provided method to check authentication
                        if (this.config.isAuthenticated) {
                            return [2 /*return*/, (this.config.isAuthenticated)(this)];
                        }
                        return [4 /*yield*/, this.getAccessToken()];
                    case 1:
                        accessToken = _a.sent();
                        return [4 /*yield*/, this.getIdToken()];
                    case 2:
                        idToken = _a.sent();
                        return [2 /*return*/, !!(accessToken || idToken)];
                }
            });
        });
    };
    /**
     * @param {?} state
     * @return {?}
     */
    OktaAuthService.prototype.emitAuthenticationState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.observers.forEach(function (observer) { return observer.next(state); });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Returns the current accessToken in the tokenManager.
     */
    /**
     * Returns the current accessToken in the tokenManager.
     * @return {?}
     */
    OktaAuthService.prototype.getAccessToken = /**
     * Returns the current accessToken in the tokenManager.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var accessToken, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.oktaAuth.tokenManager.get('accessToken')];
                    case 1:
                        accessToken = (/** @type {?} */ (_a.sent()));
                        return [2 /*return*/, accessToken.accessToken];
                    case 2:
                        err_1 = _a.sent();
                        // The user no longer has an existing SSO session in the browser.
                        // (OIDC error `login_required`)
                        // Ask the user to authenticate again.
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the current idToken in the tokenManager.
     */
    /**
     * Returns the current idToken in the tokenManager.
     * @return {?}
     */
    OktaAuthService.prototype.getIdToken = /**
     * Returns the current idToken in the tokenManager.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var idToken, err_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.oktaAuth.tokenManager.get('idToken')];
                    case 1:
                        idToken = (/** @type {?} */ (_a.sent()));
                        return [2 /*return*/, idToken.idToken];
                    case 2:
                        err_2 = _a.sent();
                        // The user no longer has an existing SSO session in the browser.
                        // (OIDC error `login_required`)
                        // Ask the user to authenticate again.
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns user claims from the /userinfo endpoint.
     */
    /**
     * Returns user claims from the /userinfo endpoint.
     * @return {?}
     */
    OktaAuthService.prototype.getUser = /**
     * Returns user claims from the /userinfo endpoint.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.oktaAuth.token.getUserInfo()];
            });
        });
    };
    /**
     * Returns the configuration object used.
     */
    /**
     * Returns the configuration object used.
     * @return {?}
     */
    OktaAuthService.prototype.getOktaConfig = /**
     * Returns the configuration object used.
     * @return {?}
     */
    function () {
        return this.config;
    };
    /**
     * Launches the login redirect.
     * @param fromUri
     * @param additionalParams
     */
    /**
     * Launches the login redirect.
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    OktaAuthService.prototype.loginRedirect = /**
     * Launches the login redirect.
     * @param {?=} fromUri
     * @param {?=} additionalParams
     * @return {?}
     */
    function (fromUri, additionalParams) {
        if (fromUri) {
            this.setFromUri(fromUri);
        }
        /** @type {?} */
        var params = Object.assign({
            scopes: this.config.scopes,
            responseType: this.config.responseType
        }, additionalParams);
        return this.oktaAuth.token.getWithRedirect(params); // can throw
    };
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     * @param queryParams
     */
    /**
     * Stores the intended path to redirect after successful login.
     * @param {?=} fromUri
     * @return {?}
     */
    OktaAuthService.prototype.setFromUri = /**
     * Stores the intended path to redirect after successful login.
     * @param {?=} fromUri
     * @return {?}
     */
    function (fromUri) {
        // Use current location if fromUri was not passed
        fromUri = fromUri || window.location.href;
        // If a relative path was passed, convert to absolute URI
        if (fromUri.charAt(0) === '/') {
            fromUri = window.location.origin + fromUri;
        }
        sessionStorage.setItem('referrerPath', fromUri);
    };
    /**
     * Returns the referrer path from localStorage or app root.
     */
    /**
     * Returns the referrer path from localStorage or app root.
     * @return {?}
     */
    OktaAuthService.prototype.getFromUri = /**
     * Returns the referrer path from localStorage or app root.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fromUri = sessionStorage.getItem('referrerPath') || window.location.origin;
        sessionStorage.removeItem('referrerPath');
        return fromUri;
    };
    /**
     * Parses the tokens from the callback URL.
     */
    /**
     * Parses the tokens from the callback URL.
     * @return {?}
     */
    OktaAuthService.prototype.handleAuthentication = /**
     * Parses the tokens from the callback URL.
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, tokens;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.oktaAuth.token.parseFromUrl()];
                    case 1:
                        res = _a.sent();
                        tokens = res.tokens;
                        if (tokens.accessToken) {
                            this.oktaAuth.tokenManager.add('accessToken', (/** @type {?} */ (tokens.accessToken)));
                        }
                        if (tokens.idToken) {
                            this.oktaAuth.tokenManager.add('idToken', (/** @type {?} */ (tokens.idToken)));
                        }
                        return [4 /*yield*/, this.isAuthenticated()];
                    case 2:
                        if (_a.sent()) {
                            this.emitAuthenticationState(true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param options
     */
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param {?=} options
     * @return {?}
     */
    OktaAuthService.prototype.logout = /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var redirectUri;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        redirectUri = null;
                        options = options || {};
                        if (typeof options === 'string') {
                            redirectUri = options;
                            // If a relative path was passed, convert to absolute URI
                            if (redirectUri.charAt(0) === '/') {
                                redirectUri = window.location.origin + redirectUri;
                            }
                            options = {
                                postLogoutRedirectUri: redirectUri
                            };
                        }
                        return [4 /*yield*/, this.oktaAuth.signOut(options)];
                    case 1:
                        _a.sent();
                        this.emitAuthenticationState(false);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param scopes
     */
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param {?} scopes
     * @return {?}
     */
    OktaAuthService.prototype.scrubScopes = /**
     * Scrub scopes to ensure 'openid' is included
     * @param {?} scopes
     * @return {?}
     */
    function (scopes) {
        if (scopes.indexOf('openid') >= 0) {
            return;
        }
        scopes.unshift('openid');
    };
    OktaAuthService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OktaAuthService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [OKTA_CONFIG,] }] },
        { type: Injector }
    ]; };
    return OktaAuthService;
}());
export { OktaAuthService };
if (false) {
    /** @type {?} */
    OktaAuthService.prototype.oktaAuth;
    /** @type {?} */
    OktaAuthService.prototype.config;
    /** @type {?} */
    OktaAuthService.prototype.observers;
    /** @type {?} */
    OktaAuthService.prototype.$authenticationState;
    /** @type {?} */
    OktaAuthService.prototype.injector;
}
//# sourceMappingURL=okta.service.js.map