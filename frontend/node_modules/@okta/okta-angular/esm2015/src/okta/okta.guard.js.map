{"version":3,"file":"okta.guard.js","sourceRoot":"","sources":["../../package/src/okta/okta.guard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAYA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAQrD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAI1D,MAAM,OAAO,aAAa;;;;;IACxB,YAAoB,QAAyB,EAAU,QAAkB;QAArD,aAAQ,GAAR,QAAQ,CAAiB;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;;;;;;;;IAQxE,WAAW,CAAC,KAA6B,EAAE,KAA0B;;YACzE,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAE;gBACzC,OAAO,IAAI,CAAC;aACb;;;;;;kBAMK,cAAc,GAAyB,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,cAAc;YAEzH;;eAEG;YACH,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEpC,IAAI,cAAc,EAAE;gBAClB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9C;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;aAC/B;YAED,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;;;;;;IAEK,gBAAgB,CACpB,KAA6B,EAC7B,KAA0B;;YAE1B,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;KAAA;;;YAxCF,UAAU;;;;YAHF,eAAe;YARH,QAAQ;;;;IAaf,iCAAiC;;IAAE,iCAA0B","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Injectable, Injector } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { OktaAuthService } from './services/okta.service';\nimport { AuthRequiredFunction } from './models/okta.config';\n\n@Injectable()\nexport class OktaAuthGuard implements CanActivate, CanActivateChild {\n  constructor(private oktaAuth: OktaAuthService, private injector: Injector) { }\n\n  /**\n   * Gateway for protected route. Returns true if there is a valid accessToken,\n   * otherwise it will cache the route and start the login flow.\n   * @param route\n   * @param state\n   */\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (await this.oktaAuth.isAuthenticated()) {\n      return true;\n    }\n\n    /**\n     * Get the operation to perform on failed authentication from\n     * either the global config or route data injection.\n     */\n    const onAuthRequired: AuthRequiredFunction = route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;\n\n    /**\n     * Store the current path\n     */\n    this.oktaAuth.setFromUri(state.url);\n\n    if (onAuthRequired) {\n      onAuthRequired(this.oktaAuth, this.injector);\n    } else {\n      this.oktaAuth.loginRedirect();\n    }\n\n    return false;\n  }\n\n  async canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ) {\n    return this.canActivate(route, state);\n  }\n\n}\n"]}