{"version":3,"file":"okta-angular.js","sources":["../package/src/okta/models/okta.config.ts","../package/src/okta/packageInfo.ts","../package/src/okta/services/okta.service.ts","../package/src/okta/components/callback.component.ts","../package/src/okta/components/login-redirect.component.ts","../package/src/okta/okta.guard.ts","../package/src/okta/createService.ts","../package/src/okta/okta.module.ts"],"sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { InjectionToken, Injector } from '@angular/core';\nimport { OktaAuthService } from '../services/okta.service';\n\nexport type AuthRequiredFunction = (oktaAuth: OktaAuthService, injector: Injector) => void;\nexport type IsAuthenticatedFunction = (oktaAuth: OktaAuthService) => Promise<boolean>;\nexport type OnSessionExpiredFunction = () => void;\n\nexport interface TestingObject {\n  disableHttpsCheck: boolean;\n}\n\nexport interface TokenManagerConfig {\n  autoRenew?: boolean;\n  secure?: boolean;\n  storage?: string;\n}\n\nexport interface OktaConfig {\n  issuer?: string;\n  redirectUri?: string;\n  clientId?: string;\n  scope?: string;\n  scopes?: string[];\n  responseType?: any; // can be string or array\n  pkce?: boolean;\n  onAuthRequired?: AuthRequiredFunction;\n  testing?: TestingObject;\n  tokenManager?: TokenManagerConfig;\n  postLogoutRedirectUri?: string;\n  isAuthenticated?: IsAuthenticatedFunction;\n  onSessionExpired?: OnSessionExpiredFunction;\n}\n\nexport const OKTA_CONFIG = new InjectionToken<OktaConfig>('okta.config.angular');\n","export default {\n  'name': '@okta/okta-angular',\n  'version': '2.2.0'\n};\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Inject, Injectable, Injector } from '@angular/core';\nimport {\n  assertIssuer,\n  assertClientId,\n  assertRedirectUri,\n} from '@okta/configuration-validation';\n\nimport { OKTA_CONFIG, OktaConfig, AuthRequiredFunction } from '../models/okta.config';\nimport { UserClaims } from '../models/user-claims';\nimport { TokenManager, AccessToken, IDToken } from '../models/token-manager';\n\nimport packageInfo from '../packageInfo';\n\n/**\n * Import the okta-auth-js library\n */\nimport OktaAuth from '@okta/okta-auth-js';\nimport { Observable, Observer } from 'rxjs';\n\n@Injectable()\nexport class OktaAuthService {\n    private oktaAuth: OktaAuth;\n    private config: OktaConfig;\n    private observers: Observer<boolean>[];\n    $authenticationState: Observable<boolean>;\n\n    constructor(@Inject(OKTA_CONFIG) config: OktaConfig, private injector: Injector) {\n      this.observers = [];\n\n      /**\n       * Cache the auth config.\n       */\n      this.config = Object.assign({}, config);\n      this.config.scopes = this.config.scopes || ['openid', 'email'];\n\n      /**\n       * Scrub scopes to ensure 'openid' is included\n       */\n\n      this.scrubScopes(this.config.scopes);\n\n      // Assert Configuration\n      assertIssuer(this.config.issuer, this.config.testing);\n      assertClientId(this.config.clientId);\n      assertRedirectUri(this.config.redirectUri);\n\n      this.oktaAuth = new OktaAuth(this.config);\n      this.oktaAuth.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.oktaAuth.userAgent}`;\n      this.$authenticationState = new Observable((observer: Observer<boolean>) => { this.observers.push(observer); });\n    }\n\n    login(fromUri?: string, additionalParams?: object) {\n      this.setFromUri(fromUri);\n      const onAuthRequired: AuthRequiredFunction | undefined = this.config.onAuthRequired;\n      if (onAuthRequired) {\n        return onAuthRequired(this, this.injector);\n      }\n      return this.loginRedirect(undefined, additionalParams);\n    }\n\n    getTokenManager(): TokenManager {\n      return this.oktaAuth.tokenManager;\n    }\n\n    /**\n     * Checks if there is an access token OR an id token\n     * A custom method may be provided on config to override this logic\n     */\n    async isAuthenticated(): Promise<boolean> {\n      // Support a user-provided method to check authentication\n      if (this.config.isAuthenticated) {\n        return (this.config.isAuthenticated)(this);\n      }\n\n      const accessToken = await this.getAccessToken();\n      const idToken = await this.getIdToken();\n      return !!(accessToken || idToken);\n    }\n\n    private async emitAuthenticationState(state: boolean) {\n      this.observers.forEach(observer => observer.next(state));\n    }\n\n    /**\n     * Returns the current accessToken in the tokenManager.\n     */\n    async getAccessToken(): Promise<string | undefined>  {\n      try {\n        const accessToken: AccessToken = await this.oktaAuth.tokenManager.get('accessToken') as AccessToken;\n        return accessToken.accessToken;\n      } catch (err) {\n        // The user no longer has an existing SSO session in the browser.\n        // (OIDC error `login_required`)\n        // Ask the user to authenticate again.\n        return undefined;\n      }\n    }\n\n    /**\n     * Returns the current idToken in the tokenManager.\n     */\n    async getIdToken(): Promise<string | undefined> {\n      try {\n        const idToken: IDToken = await this.oktaAuth.tokenManager.get('idToken') as IDToken;\n        return idToken.idToken;\n      } catch (err) {\n        // The user no longer has an existing SSO session in the browser.\n        // (OIDC error `login_required`)\n        // Ask the user to authenticate again.\n        return undefined;\n      }\n    }\n\n    /**\n     * Returns user claims from the /userinfo endpoint.\n     */\n    async getUser(): Promise<UserClaims> {\n      return this.oktaAuth.token.getUserInfo();\n    }\n\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig {\n      return this.config;\n    }\n\n    /**\n     * Launches the login redirect.\n     * @param fromUri\n     * @param additionalParams\n     */\n    loginRedirect(fromUri?: string, additionalParams?: object) {\n      if (fromUri) {\n        this.setFromUri(fromUri);\n      }\n\n      const params = Object.assign({\n        scopes: this.config.scopes,\n        responseType: this.config.responseType\n      }, additionalParams);\n\n      return this.oktaAuth.token.getWithRedirect(params); // can throw\n    }\n\n    /**\n     * Stores the intended path to redirect after successful login.\n     * @param uri\n     * @param queryParams\n     */\n    setFromUri(fromUri?: string) {\n      // Use current location if fromUri was not passed\n      fromUri = fromUri || window.location.href;\n      // If a relative path was passed, convert to absolute URI\n      if (fromUri.charAt(0) === '/') {\n        fromUri = window.location.origin + fromUri;\n      }\n      sessionStorage.setItem('referrerPath', fromUri);\n    }\n\n    /**\n     * Returns the referrer path from localStorage or app root.\n     */\n    getFromUri(): string {\n      const fromUri = sessionStorage.getItem('referrerPath') || window.location.origin;\n      sessionStorage.removeItem('referrerPath');\n      return fromUri;\n    }\n\n    /**\n     * Parses the tokens from the callback URL.\n     */\n    async handleAuthentication(): Promise<void> {\n      const res = await this.oktaAuth.token.parseFromUrl();\n      const tokens = res.tokens;\n      if (tokens.accessToken) {\n        this.oktaAuth.tokenManager.add('accessToken', tokens.accessToken as AccessToken);\n      }\n      if (tokens.idToken) {\n        this.oktaAuth.tokenManager.add('idToken', tokens.idToken as IDToken);\n      }\n      if (await this.isAuthenticated()) {\n        this.emitAuthenticationState(true);\n      }\n    }\n\n    /**\n     * Clears the user session in Okta and removes\n     * tokens stored in the tokenManager.\n     * @param options\n     */\n    async logout(options?: any): Promise<void> {\n      let redirectUri = null;\n      options = options || {};\n      if (typeof options === 'string') {\n        redirectUri = options;\n        // If a relative path was passed, convert to absolute URI\n        if (redirectUri.charAt(0) === '/') {\n          redirectUri = window.location.origin + redirectUri;\n        }\n        options = {\n          postLogoutRedirectUri: redirectUri\n        };\n      }\n      await this.oktaAuth.signOut(options);\n      this.emitAuthenticationState(false);\n    }\n\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     * @param scopes\n     */\n    scrubScopes(scopes: string[]): void {\n      if (scopes.indexOf('openid') >= 0) {\n        return;\n      }\n      scopes.unshift('openid');\n    }\n}\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { OktaAuthService } from '../services/okta.service';\n\n@Component({\n  template: `<div>{{error}}</div>`\n})\nexport class OktaCallbackComponent implements OnInit {\n  error: string;\n\n  constructor(private okta: OktaAuthService) {}\n\n  async ngOnInit() {\n    /**\n     * Handles the response from Okta and parses tokens.\n     */\n    return this.okta.handleAuthentication()\n      .then(() => {\n        /**\n         * Navigate back to the saved uri, or root of application.\n         */\n        const fromUri = this.okta.getFromUri();\n        window.location.replace(fromUri);\n      })\n      .catch(e => {\n        this.error = e.toString();\n      });\n  }\n}\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { OktaAuthService } from '../services/okta.service';\n\n@Component({ template: `` })\nexport class OktaLoginRedirectComponent implements OnInit {\n  constructor(private okta: OktaAuthService) {}\n  async ngOnInit() {\n    return this.okta.loginRedirect();\n  }\n}\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Injectable, Injector } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\n\nimport { OktaAuthService } from './services/okta.service';\nimport { AuthRequiredFunction } from './models/okta.config';\n\n@Injectable()\nexport class OktaAuthGuard implements CanActivate, CanActivateChild {\n  constructor(private oktaAuth: OktaAuthService, private injector: Injector) { }\n\n  /**\n   * Gateway for protected route. Returns true if there is a valid accessToken,\n   * otherwise it will cache the route and start the login flow.\n   * @param route\n   * @param state\n   */\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (await this.oktaAuth.isAuthenticated()) {\n      return true;\n    }\n\n    /**\n     * Get the operation to perform on failed authentication from\n     * either the global config or route data injection.\n     */\n    const onAuthRequired: AuthRequiredFunction = route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;\n\n    /**\n     * Store the current path\n     */\n    this.oktaAuth.setFromUri(state.url);\n\n    if (onAuthRequired) {\n      onAuthRequired(this.oktaAuth, this.injector);\n    } else {\n      this.oktaAuth.loginRedirect();\n    }\n\n    return false;\n  }\n\n  async canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ) {\n    return this.canActivate(route, state);\n  }\n\n}\n","import { Injector } from '@angular/core';\nimport { OktaConfig } from './models/okta.config';\nimport { OktaAuthService } from './services/okta.service';\n\nexport function createOktaService(config: OktaConfig, injector: Injector) {\n  return new OktaAuthService(config, injector);\n}\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { NgModule, Injector } from '@angular/core';\nimport { OktaCallbackComponent } from './components/callback.component';\nimport { OktaLoginRedirectComponent } from './components/login-redirect.component';\nimport { OktaAuthService } from './services/okta.service';\nimport { OktaAuthGuard } from './okta.guard';\nimport { OKTA_CONFIG } from './models/okta.config';\nimport { createOktaService } from './createService';\n\n@NgModule({\n  declarations: [\n    OktaCallbackComponent,\n    OktaLoginRedirectComponent,\n  ],\n  exports: [\n    OktaCallbackComponent,\n    OktaLoginRedirectComponent,\n  ],\n  providers: [\n    OktaAuthGuard,\n    {\n      provide: OktaAuthService,\n      useFactory: createOktaService,\n      deps: [\n        OKTA_CONFIG,\n        Injector\n      ]\n    }\n  ]\n})\nexport class OktaAuthModule {\n\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IA6Ca,WAAW,GAAG,IAAI,cAAc,CAAa,qBAAqB;;;;;;AC7C/E,kBAAe;IACb,MAAM,EAAE,oBAAoB;IAC5B,SAAS,EAAE,OAAO;CACnB,CAAC;;;;;;;ICmCE,yBAAiC,MAAkB,EAAU,QAAkB;QAA/E,iBAuBC;QAvB4D,aAAQ,GAAR,QAAQ,CAAU;QAC7E,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;;;;QAKpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;;;;QAM/D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;QAGrC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACtD,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACrC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAM,WAAW,CAAC,IAAI,SAAI,WAAW,CAAC,OAAO,SAAI,IAAI,CAAC,QAAQ,CAAC,SAAW,CAAC;QAClG,IAAI,CAAC,oBAAoB,GAAG,IAAI,UAAU,CAAC,UAAC,QAA2B,IAAO,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;KACjH;;;;;;IAED,+BAAK;;;;;IAAL,UAAM,OAAgB,EAAE,gBAAyB;QAC/C,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;;YACnB,cAAc,GAAqC,IAAI,CAAC,MAAM,CAAC,cAAc;QACnF,IAAI,cAAc,EAAE;YAClB,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;KACxD;;;;IAED,yCAAe;;;IAAf;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;KACnC;;;;;;;;;;IAMK,yCAAe;;;;;IAArB;;;;;;;wBAEE,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;4BAC/B,sBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,EAAC;yBAC5C;wBAEmB,qBAAM,IAAI,CAAC,cAAc,EAAE,EAAA;;wBAAzC,WAAW,GAAG,SAA2B;wBAC/B,qBAAM,IAAI,CAAC,UAAU,EAAE,EAAA;;wBAAjC,OAAO,GAAG,SAAuB;wBACvC,sBAAO,CAAC,EAAE,WAAW,IAAI,OAAO,CAAC,EAAC;;;;KACnC;;;;;IAEa,iDAAuB;;;;IAArC,UAAsC,KAAc;;;gBAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;;;;KAC1D;;;;;;;;IAKK,wCAAc;;;;IAApB;;;;;;;wBAEqC,qBAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,EAAA;;wBAA9E,WAAW,sBAAgB,SAAmD,EAAe;wBACnG,sBAAO,WAAW,CAAC,WAAW,EAAC;;;;;;wBAK/B,sBAAO,SAAS,EAAC;;;;;KAEpB;;;;;;;;IAKK,oCAAU;;;;IAAhB;;;;;;;wBAE6B,qBAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAA;;wBAAlE,OAAO,sBAAY,SAA+C,EAAW;wBACnF,sBAAO,OAAO,CAAC,OAAO,EAAC;;;;;;wBAKvB,sBAAO,SAAS,EAAC;;;;;KAEpB;;;;;;;;IAKK,iCAAO;;;;IAAb;;;gBACE,sBAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAC;;;KAC1C;;;;;;;;IAKD,uCAAa;;;;IAAb;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;;;;;;;;IAOD,uCAAa;;;;;;IAAb,UAAc,OAAgB,EAAE,gBAAyB;QACvD,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC1B;;YAEK,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAC3B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;YAC1B,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;SACvC,EAAE,gBAAgB,CAAC;QAEpB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;KACpD;;;;;;;;;;;IAOD,oCAAU;;;;;IAAV,UAAW,OAAgB;;QAEzB,OAAO,GAAG,OAAO,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;;QAE1C,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC7B,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC;SAC5C;QACD,cAAc,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;KACjD;;;;;;;;IAKD,oCAAU;;;;IAAV;;YACQ,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM;QAChF,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC;KAChB;;;;;;;;IAKK,8CAAoB;;;;IAA1B;;;;;4BACc,qBAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,EAAA;;wBAA9C,GAAG,GAAG,SAAwC;wBAC9C,MAAM,GAAG,GAAG,CAAC,MAAM;wBACzB,IAAI,MAAM,CAAC,WAAW,EAAE;4BACtB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,qBAAE,MAAM,CAAC,WAAW,GAAgB,CAAC;yBAClF;wBACD,IAAI,MAAM,CAAC,OAAO,EAAE;4BAClB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,qBAAE,MAAM,CAAC,OAAO,GAAY,CAAC;yBACtE;wBACG,qBAAM,IAAI,CAAC,eAAe,EAAE,EAAA;;wBAAhC,IAAI,SAA4B,EAAE;4BAChC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;yBACpC;;;;;KACF;;;;;;;;;;;;IAOK,gCAAM;;;;;;IAAZ,UAAa,OAAa;;;;;;wBACpB,WAAW,GAAG,IAAI;wBACtB,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;wBACxB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;4BAC/B,WAAW,GAAG,OAAO,CAAC;;4BAEtB,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gCACjC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC;6BACpD;4BACD,OAAO,GAAG;gCACR,qBAAqB,EAAE,WAAW;6BACnC,CAAC;yBACH;wBACD,qBAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAA;;wBAApC,SAAoC,CAAC;wBACrC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;;;;;KACrC;;;;;;;;;;IAMD,qCAAW;;;;;IAAX,UAAY,MAAgB;QAC1B,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACjC,OAAO;SACR;QACD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAC1B;;gBAtMJ,UAAU;;;;gDAOM,MAAM,SAAC,WAAW;gBA1BN,QAAQ;;IA0NrC,sBAAC;CAvMD;;;;;;;ICTE,+BAAoB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;KAAI;;;;IAEvC,wCAAQ;;;IAAd;;;;;;;gBAIE,sBAAO,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;yBACpC,IAAI,CAAC;;;;;4BAIE,OAAO,GAAG,KAAI,CAAC,IAAI,CAAC,UAAU,EAAE;wBACtC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;qBAClC,CAAC;yBACD,KAAK,CAAC,UAAA,CAAC;wBACN,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;qBAC3B,CAAC,EAAC;;;KACN;;gBAvBF,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;iBACjC;;;;gBAJQ,eAAe;;IA0BxB,4BAAC;CAxBD;;;;;;;ICCE,oCAAoB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;KAAI;;;;IACvC,6CAAQ;;;IAAd;;;gBACE,sBAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC;;;KAClC;;gBALF,SAAS,SAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;;;;gBAFlB,eAAe;;IAQxB,iCAAC;CAND;;;;;;;ICUE,uBAAoB,QAAyB,EAAU,QAAkB;QAArD,aAAQ,GAAR,QAAQ,CAAiB;QAAU,aAAQ,GAAR,QAAQ,CAAU;KAAK;;;;;;;;;;;;;;IAQxE,mCAAW;;;;;;;IAAjB,UAAkB,KAA6B,EAAE,KAA0B;;;;;4BACrE,qBAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,EAAA;;wBAAzC,IAAI,SAAqC,EAAE;4BACzC,sBAAO,IAAI,EAAC;yBACb;wBAMK,cAAc,GAAyB,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,cAAc;;;;wBAKzH,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAEpC,IAAI,cAAc,EAAE;4BAClB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC9C;6BAAM;4BACL,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;yBAC/B;wBAED,sBAAO,KAAK,EAAC;;;;KACd;;;;;;IAEK,wCAAgB;;;;;IAAtB,UACE,KAA6B,EAC7B,KAA0B;;;gBAE1B,sBAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC;;;KACvC;;gBAxCF,UAAU;;;;gBAHF,eAAe;gBARH,QAAQ;;IAqD7B,oBAAC;CA1CD;;;;;;ACrBA;;;;;SAEgB,iBAAiB,CAAC,MAAkB,EAAE,QAAkB;IACtE,OAAO,IAAI,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC/C,CAAC;;;;;;SC2BiB,iBAAiB;AAbnC;IAAA;KAuBC;;gBAvBA,QAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,qBAAqB;wBACrB,0BAA0B;qBAC3B;oBACD,OAAO,EAAE;wBACP,qBAAqB;wBACrB,0BAA0B;qBAC3B;oBACD,SAAS,EAAE;wBACT,aAAa;wBACb;4BACE,OAAO,EAAE,eAAe;4BACxB,UAAU,IAAmB;4BAC7B,IAAI,EAAE;gCACJ,WAAW;gCACX,QAAQ;6BACT;yBACF;qBACF;iBACF;;IAGD,qBAAC;CAvBD;;"}