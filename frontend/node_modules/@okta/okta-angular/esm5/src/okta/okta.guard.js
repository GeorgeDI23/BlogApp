/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { Injectable, Injector } from '@angular/core';
import { OktaAuthService } from './services/okta.service';
var OktaAuthGuard = /** @class */ (function () {
    function OktaAuthGuard(oktaAuth, injector) {
        this.oktaAuth = oktaAuth;
        this.injector = injector;
    }
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    OktaAuthGuard.prototype.canActivate = /**
     * Gateway for protected route. Returns true if there is a valid accessToken,
     * otherwise it will cache the route and start the login flow.
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var onAuthRequired;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.oktaAuth.isAuthenticated()];
                    case 1:
                        if (_a.sent()) {
                            return [2 /*return*/, true];
                        }
                        onAuthRequired = route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired;
                        /**
                         * Store the current path
                         */
                        this.oktaAuth.setFromUri(state.url);
                        if (onAuthRequired) {
                            onAuthRequired(this.oktaAuth, this.injector);
                        }
                        else {
                            this.oktaAuth.loginRedirect();
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    OktaAuthGuard.prototype.canActivateChild = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.canActivate(route, state)];
            });
        });
    };
    OktaAuthGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OktaAuthGuard.ctorParameters = function () { return [
        { type: OktaAuthService },
        { type: Injector }
    ]; };
    return OktaAuthGuard;
}());
export { OktaAuthGuard };
if (false) {
    /** @type {?} */
    OktaAuthGuard.prototype.oktaAuth;
    /** @type {?} */
    OktaAuthGuard.prototype.injector;
}
//# sourceMappingURL=okta.guard.js.map