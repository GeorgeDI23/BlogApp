{"version":3,"file":"okta.service.js","sourceRoot":"","sources":["../../../../src/okta/services/okta.service.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Inject, Injectable, Injector } from '@angular/core';\nimport {\n  assertIssuer,\n  assertClientId,\n  assertRedirectUri,\n} from '@okta/configuration-validation';\n\nimport { OKTA_CONFIG, OktaConfig, AuthRequiredFunction } from '../models/okta.config';\nimport { UserClaims } from '../models/user-claims';\nimport { TokenManager, AccessToken, IDToken } from '../models/token-manager';\n\nimport packageInfo from '../packageInfo';\n\n/**\n * Import the okta-auth-js library\n */\nimport OktaAuth from '@okta/okta-auth-js';\nimport { Observable, Observer } from 'rxjs';\n\n@Injectable()\nexport class OktaAuthService {\n    private oktaAuth: OktaAuth;\n    private config: OktaConfig;\n    private observers: Observer<boolean>[];\n    $authenticationState: Observable<boolean>;\n\n    constructor(@Inject(OKTA_CONFIG) config: OktaConfig, private injector: Injector) {\n      this.observers = [];\n\n      /**\n       * Cache the auth config.\n       */\n      this.config = Object.assign({}, config);\n      this.config.scopes = this.config.scopes || ['openid', 'email'];\n\n      /**\n       * Scrub scopes to ensure 'openid' is included\n       */\n\n      this.scrubScopes(this.config.scopes);\n\n      // Assert Configuration\n      assertIssuer(this.config.issuer, this.config.testing);\n      assertClientId(this.config.clientId);\n      assertRedirectUri(this.config.redirectUri);\n\n      this.oktaAuth = new OktaAuth(this.config);\n      this.oktaAuth.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.oktaAuth.userAgent}`;\n      this.$authenticationState = new Observable((observer: Observer<boolean>) => { this.observers.push(observer); });\n    }\n\n    login(fromUri?: string, additionalParams?: object) {\n      this.setFromUri(fromUri);\n      const onAuthRequired: AuthRequiredFunction | undefined = this.config.onAuthRequired;\n      if (onAuthRequired) {\n        return onAuthRequired(this, this.injector);\n      }\n      return this.loginRedirect(undefined, additionalParams);\n    }\n\n    getTokenManager(): TokenManager {\n      return this.oktaAuth.tokenManager;\n    }\n\n    /**\n     * Checks if there is an access token OR an id token\n     * A custom method may be provided on config to override this logic\n     */\n    async isAuthenticated(): Promise<boolean> {\n      // Support a user-provided method to check authentication\n      if (this.config.isAuthenticated) {\n        return (this.config.isAuthenticated)(this);\n      }\n\n      const accessToken = await this.getAccessToken();\n      const idToken = await this.getIdToken();\n      return !!(accessToken || idToken);\n    }\n\n    private async emitAuthenticationState(state: boolean) {\n      this.observers.forEach(observer => observer.next(state));\n    }\n\n    /**\n     * Returns the current accessToken in the tokenManager.\n     */\n    async getAccessToken(): Promise<string | undefined>  {\n      try {\n        const accessToken: AccessToken = await this.oktaAuth.tokenManager.get('accessToken') as AccessToken;\n        return accessToken.accessToken;\n      } catch (err) {\n        // The user no longer has an existing SSO session in the browser.\n        // (OIDC error `login_required`)\n        // Ask the user to authenticate again.\n        return undefined;\n      }\n    }\n\n    /**\n     * Returns the current idToken in the tokenManager.\n     */\n    async getIdToken(): Promise<string | undefined> {\n      try {\n        const idToken: IDToken = await this.oktaAuth.tokenManager.get('idToken') as IDToken;\n        return idToken.idToken;\n      } catch (err) {\n        // The user no longer has an existing SSO session in the browser.\n        // (OIDC error `login_required`)\n        // Ask the user to authenticate again.\n        return undefined;\n      }\n    }\n\n    /**\n     * Returns user claims from the /userinfo endpoint.\n     */\n    async getUser(): Promise<UserClaims> {\n      return this.oktaAuth.token.getUserInfo();\n    }\n\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig {\n      return this.config;\n    }\n\n    /**\n     * Launches the login redirect.\n     * @param fromUri\n     * @param additionalParams\n     */\n    loginRedirect(fromUri?: string, additionalParams?: object) {\n      if (fromUri) {\n        this.setFromUri(fromUri);\n      }\n\n      const params = Object.assign({\n        scopes: this.config.scopes,\n        responseType: this.config.responseType\n      }, additionalParams);\n\n      return this.oktaAuth.token.getWithRedirect(params); // can throw\n    }\n\n    /**\n     * Stores the intended path to redirect after successful login.\n     * @param uri\n     * @param queryParams\n     */\n    setFromUri(fromUri?: string) {\n      // Use current location if fromUri was not passed\n      fromUri = fromUri || window.location.href;\n      // If a relative path was passed, convert to absolute URI\n      if (fromUri.charAt(0) === '/') {\n        fromUri = window.location.origin + fromUri;\n      }\n      sessionStorage.setItem('referrerPath', fromUri);\n    }\n\n    /**\n     * Returns the referrer path from localStorage or app root.\n     */\n    getFromUri(): string {\n      const fromUri = sessionStorage.getItem('referrerPath') || window.location.origin;\n      sessionStorage.removeItem('referrerPath');\n      return fromUri;\n    }\n\n    /**\n     * Parses the tokens from the callback URL.\n     */\n    async handleAuthentication(): Promise<void> {\n      const res = await this.oktaAuth.token.parseFromUrl();\n      const tokens = res.tokens;\n      if (tokens.accessToken) {\n        this.oktaAuth.tokenManager.add('accessToken', tokens.accessToken as AccessToken);\n      }\n      if (tokens.idToken) {\n        this.oktaAuth.tokenManager.add('idToken', tokens.idToken as IDToken);\n      }\n      if (await this.isAuthenticated()) {\n        this.emitAuthenticationState(true);\n      }\n    }\n\n    /**\n     * Clears the user session in Okta and removes\n     * tokens stored in the tokenManager.\n     * @param options\n     */\n    async logout(options?: any): Promise<void> {\n      let redirectUri = null;\n      options = options || {};\n      if (typeof options === 'string') {\n        redirectUri = options;\n        // If a relative path was passed, convert to absolute URI\n        if (redirectUri.charAt(0) === '/') {\n          redirectUri = window.location.origin + redirectUri;\n        }\n        options = {\n          postLogoutRedirectUri: redirectUri\n        };\n      }\n      await this.oktaAuth.signOut(options);\n      this.emitAuthenticationState(false);\n    }\n\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     * @param scopes\n     */\n    scrubScopes(scopes: string[]): void {\n      if (scopes.indexOf('openid') >= 0) {\n        return;\n      }\n      scopes.unshift('openid');\n    }\n}\n"]}