{"version":3,"file":"okta.service.d.ts","sources":["okta.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector } from '@angular/core';\nimport { OktaConfig } from '../models/okta.config';\nimport { UserClaims } from '../models/user-claims';\nimport { TokenManager } from '../models/token-manager';\nimport { Observable } from 'rxjs';\nexport declare class OktaAuthService {\n    private injector;\n    private oktaAuth;\n    private config;\n    private observers;\n    $authenticationState: Observable<boolean>;\n    constructor(config: OktaConfig, injector: Injector);\n    login(fromUri?: string, additionalParams?: object): any;\n    getTokenManager(): TokenManager;\n    /**\n     * Checks if there is an access token OR an id token\n     * A custom method may be provided on config to override this logic\n     */\n    isAuthenticated(): Promise<boolean>;\n    private emitAuthenticationState;\n    /**\n     * Returns the current accessToken in the tokenManager.\n     */\n    getAccessToken(): Promise<string | undefined>;\n    /**\n     * Returns the current idToken in the tokenManager.\n     */\n    getIdToken(): Promise<string | undefined>;\n    /**\n     * Returns user claims from the /userinfo endpoint.\n     */\n    getUser(): Promise<UserClaims>;\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig;\n    /**\n     * Launches the login redirect.\n     * @param fromUri\n     * @param additionalParams\n     */\n    loginRedirect(fromUri?: string, additionalParams?: object): any;\n    /**\n     * Stores the intended path to redirect after successful login.\n     * @param uri\n     * @param queryParams\n     */\n    setFromUri(fromUri?: string): void;\n    /**\n     * Returns the referrer path from localStorage or app root.\n     */\n    getFromUri(): string;\n    /**\n     * Parses the tokens from the callback URL.\n     */\n    handleAuthentication(): Promise<void>;\n    /**\n     * Clears the user session in Okta and removes\n     * tokens stored in the tokenManager.\n     * @param options\n     */\n    logout(options?: any): Promise<void>;\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     * @param scopes\n     */\n    scrubScopes(scopes: string[]): void;\n}\n"]}